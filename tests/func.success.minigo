// The following code must be successfully parsed and not result in an errorfun
package main;

func TestHelloWorld() {
    printf("Hello, World\n");
};

func TestBasicArithmetic() {
    a := 5;
    b := 3;
    c := a + b;
       printf("%lld\n", c);
};

func TestConditionalStatement() {
    a := 5;
    if a > 3 {
       printf("a is greater than 3\n");
    } else {
       printf("a is not greater than 3\n");
    };
};

func TestInfiniteForLoop() {
    i := 0;
    for {
        if i >= 5 {
            break;
        };
        printf("%lld\n", i);
        i = i + 1;
    };
};

 func TestForConditional() {
     i := 0;
     for i < 5 {
         printf("%lld\n", i);
         i = i + 1;
     };
 };

 func TestForLoopClassic() {
     for i := 0; i < 5; i = i + 1 {
         printf("%lld\n", i);
     };
 };

 func SumOfFirstNNaturalNumbers() {
     sum := 0;
     n := 10;
     for i := 1; i <= n; i = i + 1 {
         sum = sum + i;
     };

     printf("%lld\n", sum);
 };

func Fibonacci(n int) int {

    if n == 0 {
        return 0;
    };

    a := 0;
    b := 1;

    c := 0;
    for i := 2; i <= n; i = i + 1 {
        c = a + b;
        a = b;
        b = c;
    };
    return c;
};

func ArrayReversal() {
    var arr [5]int;
    arr[0] = 1;
    arr[1] = 2;
    arr[2] = 3;
    arr[3] = 4;
    arr[4] = 5;
    n := 5;
    for i := 0; i < (n/2); i = i + 1 {
        temp := arr[i];
        idx := n - i - 1;
        arr[i] = arr[idx];
        arr[idx] = temp;
    };

    for i := 0; i < len(arr); i++ {
        printf("arr[%d] = %lld\n", i, arr[i]);
    };
};

func BubbleSort() {
    var arr [5]int;
    arr[0] = 5;
    arr[1] = 3;
    arr[2] = 2;
    arr[3] = 4;
    arr[4] = 1;

    for i := 0; i < len(arr); i++ {
        printf("bubble sort before: %lld\n", arr[i]);
    };

    for i := 0; i < len(arr)-1; i = i + 1 {
        for j := 0; j < len(arr)-i-1; j = j + 1 {
            if arr[j] > arr[j+1] {
                temp := arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            };
        };
    };

    for i := 0; i < len(arr); i++ {
        printf("bubble sort after: %lld\n", arr[i]);
    };
};


var PIOVER180 = 0.01745329252;
func deg2rad(x float) float {
    return x * PIOVER180;
};

func sind(theta float) float {
    return (4.0*theta*(180.0-theta))/(40500.0-theta*(180.0-theta));

};

var PI = 3.141592653589793;
var PISQUARED = 9.689604401;

func sin(theta float) float {
    return (16.0 * theta * (PI - theta))/(5.0*PI*PI - (4.0*theta*(PI-theta)));
};

func cos(theta float) float {
    return (PISQUARED - 4.0 * (theta*theta))/(PISQUARED + theta*theta);
};

func tand(x float) float {
    return (10.0 + x) / (100.0 - x);
};

func Factorial(n int) int {
    fact := 1;

    for i := 1; i <= n; i++ {
        fact *= i;
    };

    return fact;
};

func FibonacciRec(n int) int {
    if n == 0 {
        return 0;
    };
    if n == 1 {
        return 1;
    };

    return FibonacciRec(n-1) + FibonacciRec(n-2);
};

func main() {
    println("--- Hello World ---");
    TestHelloWorld();
    println("--- Basic Arithmetic ---");
    TestBasicArithmetic();
    println("--- Conditional ---");
    TestConditionalStatement();
    println("--- Infinite for ---");
    TestInfiniteForLoop();
    println("--- Conditional For ---");
    TestForConditional();
    println("--- Classic For ---");
    TestForLoopClassic();
    println("--- Sum of First N Natural Numbers ---");
    SumOfFirstNNaturalNumbers();
    println("--- Fibonacci(5) ---");
    printf("Fibonacci(5) = %d\n", Fibonacci(5));
    println("--- Reverse Array ---");
    ArrayReversal();
    println("--- Bubble Sort ---");
    BubbleSort();
    println("--- Fibonacci(0 through 20) ---");
    for i := 0; i < 60; i++ {
        printf("Fibonacci(%lld) = %lld\n", i, Fibonacci(i));
    };

    println("--- Factorial(5) ---");
    println(Factorial(5));
    println("--- sin, cos and tan ---");
    for idx := 0.0; idx < 180.0; idx += 1.0 {
        rad := deg2rad(idx);
        printf("sin(%0.2lf) = %lf\n", rad, sin(rad));
        printf("cos(%0.2lf) = %lf\n", rad, cos(rad));
        printf("tand(%.0lf) = %.3lf\n", idx, tand(idx));
    };

    for i := 0; i < 10; i++ {
        println(FibonacciRec(i));
    };

};
